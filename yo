#!/usr/bin/bash
#!/bin/bash

# To initialize a project
yo_init() {
  # Create .yo directory in home if does not exist
  mkdir -p "$HOME/.yo"

  _yoInitPath=$(pwd)
  _projectConfigDirName=${_yoInitPath////_}

  # Creates a project config directory if does not exist
  # Sub directories under initialized directory cannot be initialized
  yo_get_project_info
  if [ -d "$HOME/.yo/$_projectConfigDirName" ] || [[ -n "$currentProjectRoot" ]]; then
    unset currentProjectRoot
    printError "Project already initialized"
  else
    mkdir "$HOME/.yo/$_projectConfigDirName"
    echo "project_root=$(pwd)/" >"$HOME/.yo/$_projectConfigDirName/config"
    echo "script_path=" >>"$HOME/.yo/$_projectConfigDirName/config"
    echo "package_path=" >>"$HOME/.yo/$_projectConfigDirName/config"

    printSuccess "Project initialized"
  fi
}

# To set the path to bash scripts
# Path should be relative to project root
yo_script() {
  yo_verify_project_initialization

  sed -i 's|script_path=.*|script_path='"$currentProjectRoot$1"'|g' "$HOME/.yo/$currentProjectFolderName"/config
  unset currentProjectRoot
}

# To set the path to flutter package(s)
# Path should be relative to project root
yo_package() {
  yo_verify_project_initialization

  sed -i 's|package_path=.*|package_path='"$currentProjectRoot$1"'|g' "$HOME/.yo/$currentProjectFolderName"/config
  unset currentProjectRoot
}

# Run flutter pub get on specified package. If no package is specified, flutter pub get will be run on all packages
yo_get() (
  yo_get_get() {
    cd "$1" || return
    _file=pubspec.yaml
    if [ -f "$_file" ]; then
      flutter pub get
    fi
    cd ..
  }

  yo_verify_project_initialization

  currentFolder=$(pwd)

  shopt -s nullglob

  currentProjectPackage=$(grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectFolderName"/config)

  # Print error if package path has not been set
  if [ -z "$currentProjectPackage" ]; then
    printError "Please add package path first"
    return
  fi

  cd "$currentProjectPackage" || return

  if [ -n "$1" ]; then
    if [ -d "$1" ]; then
      yo_get_get "$1"
    else
      printError "No such directory"
    fi
  else
    directories=(*)
    for d in "${directories[@]}"; do
      yo_get_get "$d"
    done
  fi

  cd "$currentFolder" || return
)

yo() {
  cmd=$1
  path=$2

  case $cmd in
  init)
    shift
    yo_init
    ;;
  script)
    shift
    yo_script "$path"
    ;;
  package)
    shift
    yo_package "$path"
    ;;
  get)
    shift
    yo_get "$path"
    ;;
  esac
}

# Save the current project root in currentProjectRoot variable and current project folder name in currentProjectFolderName variable
yo_get_project_info() {
  _currentPath=$(pwd)
  _currentPathName=${_currentPath////_}

  shopt -s nullglob

  cd "$HOME/.yo/" || return

  _directories=(*)
  for _dir in "${_directories[@]}"; do
    if [[ $_currentPathName == *"$_dir"* ]]; then
      cd "$_currentPath" || return

      currentProjectFolderName="$_dir"
      currentProjectRoot=$(grep -oP "(project_root=\K.*)" "$HOME/.yo/$currentProjectFolderName"/config)
      return
    fi
  done
  cd "$_currentPath" || return
}

# Verify if project has been initialized
yo_verify_project_initialization() {
  yo_get_project_info

  if [ -z "$currentProjectRoot" ]; then
    unset currentProjectRoot
    printError "Project has not yet been initialized"
    return
  fi
}

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'

printError() {
  echo -e "${RED}*** $1 ***"
}

printSuccess() {
  echo -e "${GREEN}*** $1 ***"
}

printInfo() {
  echo -e "${YELLOW}*** $1 ***"
}
