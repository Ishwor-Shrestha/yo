#!/bin/bash

# Global variables
currentProjectRoot=
currentProjectDirectoryName=
projectInitialized=

# To initialize a project
yo_init() {
  # Create .yo directory in home if does not exist
  mkdir -p "$HOME/.yo"
  local _yoInitPath
  _yoInitPath=$(pwd)
  local _projectConfigDirName=${_yoInitPath////_}

  # Creates a project config directory if does not exist
  # Sub directories under initialized directory cannot be initialized
  yo_get_project_info
  if [[ -d "$HOME/.yo/$_projectConfigDirName" ]] || [[ -n "$currentProjectRoot" ]]; then
    printError "Project already initialized"
  else
    mkdir "$HOME/.yo/$_projectConfigDirName"
    {
      echo "project_root=$(pwd)/"
      echo "script_path="
      echo "package_path="
    } >>"$HOME/.yo/$_projectConfigDirName/config"

    printSuccess "Project initialized"
  fi
}

yo_set() {
  local _option=$1
  local _path=$2

  if [[ -z "$_option" ]]; then
    printError "Please provide a set option"
    yo_help_set
  else
    case ${_option} in
    -s)
      yo_script "$_path"
      ;;
    -p)
      yo_package "$_path"
      ;;
    *)
      printError "Unknown set option"
      yo_help_set
      ;;
    esac
  fi
}

# To set the path to bash scripts
# Path is relative to current directory
# Set current directory as path if no path is passed
yo_script() {
  _scriptPath=$(pwd)/$1
  local _oldPath
  _oldPath=$(pwd)

  cd "$_scriptPath" || return
  sed -i 's|script_path=.*|script_path='"$(pwd)/"'|g' "$HOME/.yo/$currentProjectDirectoryName"/config
  cd "$_oldPath" || return
}

# To set the path to flutter package(s)
# Path is relative to current directory
# Set current directory as path if no path is passed
yo_package() {
  _packagePath=$(pwd)/$1
  local _oldPath
  _oldPath=$(pwd)

  cd "$_packagePath" || return
  sed -i 's|package_path=.*|package_path='"$(pwd)/"'|g' "$HOME/.yo/$currentProjectDirectoryName"/config
  cd "$_oldPath" || return
}

# Run `flutter pub get` on specified package. If no package is specified, `flutter pub get` will be run on all packages
yo_get() {
  local _currentDirectory
  _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectPackagePath
  _currentProjectPackagePath=$(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)

  # Print error if package path has not been set
  if [[ -z "$_currentProjectPackagePath" ]]; then
    printError "Please add package path first"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [[ -n "$1" ]]; then
    if [[ -d "$1" ]]; then
      yo_flutter_command "$1" "flutter pub get" -verbose -back
    else
      printError "Package '$1' does not exist"
    fi
  else
    yo_flutter_command "$_currentProjectPackagePath" "flutter pub get" # Run 'flutter pub get' in package directory too
    _directories=(*/)
    for _d in "${_directories[@]}"; do
      yo_flutter_command "$_d" "flutter pub get" -back
    done
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter test` on specified package. If no package is specified, `flutter test` will be run on all packages
yo_test() {
  local _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectPackagePath=$(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)

  # Print error if package _path has not been set
  if [[ -z "$_currentProjectPackagePath" ]]; then
    printError "Please add package path first"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  local _command
  if [[ -n "$1" ]]; then
    case $1 in
    /c)
      # if /c is passed as package name, 'flutter test' will be run in current directory
      _command="yo_flutter_command $_currentDirectory flutter test -verbose"
      ;;
    /r)
      # if /r is passed as package name, 'flutter test' will be run in package directory
      _command="yo_flutter_command $_currentProjectPackagePath flutter test -verbose"
      ;;
    *)
      if [[ -d "$1" ]]; then
        _testDir="$1"
        _shouldGoBack=true
        _verbose=true

        _command="yo_flutter_command $1 flutter test -verbose -back"
      else
        printError "Package '$1' does not exist"
        return
      fi
      ;;
    esac
    if [[ -z "$2" ]]; then
      eval "${_command}"
    else
      if [[ "$2" == "--coverage" ]]; then
        yo_test_coverage "$_testDir"
      else
        printError "Please use correct test option"
        yo_help_test_coverage
      fi
    fi
  else
    yo_flutter_command "$_currentProjectPackagePath" "flutter test"
    _directories=(*/)
    for _d in "${_directories[@]}"; do
      yo_flutter_command "$_d" "flutter test" -back
    done
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter test --coverage` on specified package.
yo_test_coverage() {
  yo_flutter_command "$1" "flutter test --coverage" -verbose -back
  local _lcovLocation=$1/coverage/lcov.info
  if [[ -f ${_lcovLocation} ]]; then
    if [[ "$(command -v genhtml)" ]]; then
      cd "$1" || return

      genhtml coverage/lcov.info -o coverage/html

      local _htmlLocation="coverage/html/index.html"
      if [[ "$(command -v open-xdg)" ]]; then
        open-xdg ${_htmlLocation}
      elif [[ "$(command -v start)" ]]; then
        start ${_htmlLocation}
      elif [[ "$(command -v open)" ]]; then
        open ${_htmlLocation}
      fi
    else
      printError "Please install lcov to run command"
    fi
  fi
}

# Run `flutter build_runner watch` on specified package
# Print error if no package name is passed
yo_watch() {
  local _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectPackagePath=$(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)

  # Print error if package path has not been set
  if [[ -z "$_currentProjectPackagePath" ]]; then
    printError "Please add package path"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [[ -n "$1" ]]; then
    case $1 in
    /r)
      yo_flutter_command "$_currentProjectPackagePath" "flutter pub run build_runner watch --delete-conflicting-outputs" -verbose # if /c is passed as package name, build_runner will be run in package directory
      ;;
    /c)
      yo_flutter_command "$_currentDirectory" "flutter pub run build_runner watch --delete-conflicting-outputs" -verbose # if /c is passed as package name, build_runner will be run in current directory
      ;;
    *)
      if [[ -d "$1" ]]; then
        yo_flutter_command "$1" "flutter pub run build_runner watch --delete-conflicting-outputs" -verbose -back
      else
        printError "Package '$1' does not exist"
      fi
      ;;
    esac

  else
    printError "Please provide the package name"
    yo_help_watch
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter build_runner build` on specified package
# Print error if no package name is passed
yo_build() {
  local _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectPackagePath=$(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)
  unset currentProjectDirectoryName
  unset currentProjectRoot

  # Print error if package path has not been set
  if [[ -z "$_currentProjectPackagePath" ]]; then
    printError "Please add package path"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [[ -n "$1" ]]; then
    case $1 in
    /r)
      yo_flutter_command "$_currentProjectPackagePath" "flutter pub run build_runner build --delete-conflicting-outputs" -verbose # if /c is passed as package name, build_runner will be run in package directory
      ;;
    /c)
      yo_flutter_command "$_currentDirectory" "flutter pub run build_runner build --delete-conflicting-outputs" -verbose # if /c is passed as package name, build_runner will be run in current directory
      ;;
    *)
      if [[ -d "$1" ]]; then
        yo_flutter_command "$1" "flutter pub run build_runner build --delete-conflicting-outputs" -verbose -back
      else
        printError "Package '$1' does not exist"
      fi
      ;;
    esac

  else
    printError "Please provide the package name"
    yo_help_build
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter pub upgrade` on specified package. If no package is specified, `flutter pub upgrade` will be run on all packages
yo_upgrade() {
  local _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectPackagePath=$(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)

  # Print error if package path has not been set
  if [[ -z "$_currentProjectPackagePath" ]]; then
    printError "Please add package path first"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [[ -n "$1" ]]; then
    case $1 in
    /c)
      yo_flutter_command "$_currentDirectory" "flutter pub upgrade" -verbose # if /c is passed in package name, 'flutter pub upgrade' will be run in current directory
      ;;
    /r)
      yo_flutter_command "$_currentProjectPackagePath" "flutter pub upgrade" -verbose # if /r is passed in package name, 'flutter pub upgrade' will be run in package directory
      ;;
    *)
      if [[ -d "$1" ]]; then
        yo_flutter_command "$1" "flutter pub upgrade" -verbose -back
      else
        printError "Package '$1' does not exist"
      fi
      ;;
    esac
  else
    yo_flutter_command "$_currentProjectPackagePath" "flutter pub upgrade" # Run 'flutter pub upgrade' in package directory too
    _directories=(*/)
    for _d in "${_directories[@]}"; do
      yo_flutter_command "$_d" "flutter pub upgrade" -back
    done
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter clean` on specified package. If no package is specified, `flutter clean` will be run on all packages
yo_clean() {
  local _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectPackagePath=$(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)

  # Print error if package path has not been set
  if [[ -z "$_currentProjectPackagePath" ]]; then
    printError "Please add package path first"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [[ -n "$1" ]]; then
    case $1 in
    /c)
      yo_flutter_command "$_currentDirectory" "flutter clean" -verbose # if /c is passed in package name, 'flutter clean' will be run in current directory
      ;;
    /r)
      yo_flutter_command "$_currentProjectPackagePath" "flutter clean" -verbose # if /r is passed in package name, 'flutter clean' will be run in package directory
      ;;
    *)
      if [[ -d "$1" ]]; then
        yo_flutter_command "$1" "flutter clean" -verbose -back
      else
        printError "Package '$1' does not exist"
      fi
      ;;
    esac
  else
    yo_flutter_command "$_currentProjectPackagePath" "flutter clean" # Run 'flutter clean' in package directory too
    _directories=(*/)
    for _d in "${_directories[@]}"; do
      yo_flutter_command "$_d" "flutter clean" -back
    done
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter pub outdated` on specified package
# Print error if no package name is passed
yo_outdated() {
  local _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectPackagePath=$(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)

  # Print error if package path has not been set
  if [[ -z "$_currentProjectPackagePath" ]]; then
    printError "Please add package path"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [[ -n "$1" ]]; then
    case $1 in
    /r)
      yo_flutter_command "$_currentProjectPackagePath" "flutter pub outdated" -verbose # if /c is passed as package name, `flutter pub outdated` will be run in package directory
      ;;
    /c)
      yo_flutter_command "$_currentDirectory" "flutter pub outdated" -verbose # if /c is passed as package name, `flutter pub outdated` will be run in current directory
      ;;
    *)
      if [[ -d "$1" ]]; then
        yo_flutter_command "$1" "flutter pub outdated" -verbose -back
      else
        printError "Package '$1' does not exist"
      fi
      ;;
    esac

  else
    printError "Please provide the package name"
    yo_help_outdated
  fi

  cd "$_currentDirectory" || return
}

# Run the provided script from the script directory
# Print error if no script name is passed
# Pass all passed arguments to script
yo_run() {
  local _currentDirectory=$(pwd)

  shopt -s nullglob

  local _currentProjectScriptPath=$(LC_ALL=C.UTF-8 grep -oP "(script_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)

  # Print error if package path has not been set
  if [[ -z "$_currentProjectScriptPath" ]]; then
    printError "Please add script path"
    yo_help_script
    return
  fi

  cd "$_currentProjectScriptPath" || return

  if [[ -n "$1" ]]; then
    if [[ -e "$1" ]]; then
      if [[ -x "$1" ]]; then
        # Pass arguments starting from second
        eval "./$1" "${@:2}"
      else
        eval "bash$1" "${@:2}"
      fi
    else
      printError "Script '$1' does not exist"
    fi
  else
    printError "Please provide the script name"
    yo_help_run
  fi

  cd "$_currentDirectory" || return
}

# Run the mockoon if installed
yo_mock() {
  if [[ "$(command -v mockoon)" ]]; then
    mockoon
  else
    printError "Please install mockoon"
    printInfo "Visit https://mockoon.com/ to see how to install mockoon"
  fi
}

# Print the path info
yo_path() {
  print "Project root : $(LC_ALL=C.UTF-8 grep -oP "(project_root=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)"
  print "Package path : $(LC_ALL=C.UTF-8 grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)"
  print "Script path : $(LC_ALL=C.UTF-8 grep -oP "(script_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)"
}

# Starts adb server
yo_start_server() {
  if [[ "$(command -v adb)" ]]; then
    adb start-server
  else
    printError "Please install adb to run command"
  fi
}

# Kills adb server
yo_kill_server() {
  if [[ "$(command -v adb)" ]]; then
    adb kill-server
  else
    printError "Please install adb to run command"
  fi
}

# Restarts adb server
yo_restart_server() {
  if [[ "$(command -v adb)" ]]; then
    adb kill-server
    adb start-server
  else
    printError "Please install adb to run command"
  fi
}

# Starts adb server
yo_tcpip() {
  if [[ "$(command -v adb)" ]]; then
    adb tcpip 5555
  else
    printError "Please install adb to run command"
  fi
}

# Connects to device for wifi debugging
yo_connect() {
  if [[ "$(command -v adb)" ]]; then
    if [[ -z $1 ]]; then
      printError "Please pass the ip address of the device you want to connect to"
      yo_help_connect
    fi
    adb connect $1
  else
    printError "Please install adb to run command"
  fi
}

# ------------------------- Helps ------------------------- #

yo_help() {
  print "Available YO subcommands"
  print
  print "init                                    Initialize the project"
  print "set <option> <path>                     Add path (relative to the root of the project) to script/package directory"
  print "get                                     Run 'flutter pub get' in all the packages"
  print "test                                    Run 'flutter test' in all the packages"
  print "clean                                   Run 'flutter clean' in all the packages"
  print "upgrade                                 Run 'flutter pub upgrade' in all the packages"
  print "get <package_name>                      Run 'flutter pub get' in the provided package"
  print "test <package_name>                     Run 'flutter test' in the provided package"
  print "test <package_name> --coverage          Run 'flutter test --coverage' in the provided package"
  print "clean <package_name>                    Run 'flutter clean' in the provided package"
  print "upgrade <package_name>                  Run 'flutter upgrade' in the provided package"
  print "watch <package_name>                    Run the 'build_runner watch' in the provided package"
  print "build <package_name>                    Run the 'build_runner build' in the provided package"
  print "outdated <package_name>                 Run the 'flutter pub outdated' in the provided package"
  print "run <script_name>                       Run the provided script"
  print "run <script_name> <argument(s)>         Run the provided script with the provided argument(s)"
  print "mock                                    Start mockoon"
  print "path                                    Get set paths"
  print "start-server                            Start the adb server"
  print "kill-server                             Kill the adb server"
  print "restart-server                          Restart the adb server"
  print "tcpip                                   Restart the adb server listening on TCP on PORT 5555"
  print "connect <ip_address>                    Connect to the device with the provided ip "
  print "help                                    Get info about YO's subcommands"
  print
  print "set options"
  print "-p        Set packages directory"
  print "-s        set scripts directory"
  print
  print "Allowed package names"
  print "/c                      Run the subcommand in the current directory"
  print "/r                      Run the subcommand in the root of the package directory"
  print "<directory_name>        Run the subcommand in the passed directory"
}

yo_help_init() {
  print
  print "Usage: yo init"
  print "'yo help' to see all available subcommands"
}

yo_help_set() {
  print
  print "Usage: yo set <option> <path>"
  print
  print "Set options"
  print "-p        Set packages directory"
  print "-s        set scripts directory"
  print
  print "'yo help' to see all available subcommands"
}

yo_help_script() {
  print
  print "Usage: yo set -s <path>"
  print "'yo help' to see all available subcommands"
}

yo_help_test_coverage() {
  print
  print "Usage: yo test <package> --coverage"
  print "'yo help' to see all available subcommands"
}

yo_help_package() {
  print
  print "Usage: yo set -p <path>"
  print "'yo help' to see all available subcommands"
}

yo_help_mock() {
  print
  print "Usage: yo mock"
  print "'yo help' to see all available subcommands"
}

yo_help_watch() {
  print
  print "Usage: yo watch <package_name>"
  print "'yo help' to see all available subcommands"
}

yo_help_build() {
  print
  print "Usage: yo build <package_name>"
  print "'yo help' to see all available subcommands"
}

yo_help_outdated() {
  print
  print "Usage: yo outdated <package_name>"
  print "'yo help' to see all available subcommands"
}

yo_help_run() {
  print
  print "Usage: yo run <script_name>"
  print "Usage: yo run <script_name> <argument(s)>"
  print "'yo help' to see all available subcommands"
}

yo_help_connect() {
  print
  print "Usage: yo connect <ip_address>"
  print "'yo help' to see all available subcommands"
}

# --------------------------------------------------------- #

yo() {
  local _cmd=$1
  local _path=$2

  unset commandMap
  declare -A commandMap=(["set"]="1" ["get"]="1" ["test"]="1" ["clean"]="1" ["upgrade"]="1" ["watch"]="1" ["build"]="1" ["outdated"]="1"
    ["run"]="1" ["path"]="1")

  if [[ -n "$_cmd" ]]; then
    if [[ -n "${commandMap[$_cmd]}" ]]; then
      yo_verify_project_initialization
      if ! ${projectInitialized}; then
        return
      fi
    fi
  fi

  if [[ -z "$1" ]]; then
    yo_help
  else
    case ${_cmd} in
    init)
      yo_init
      ;;
    set)
      yo_set "$2" "$3"
      ;;
    get)
      yo_get "$_path"
      ;;
    test)
      yo_test "$_path" "$3"
      ;;
    watch)
      yo_watch "$_path"
      ;;
    build)
      yo_build "$_path"
      ;;
    upgrade)
      yo_upgrade "$_path"
      ;;
    clean)
      yo_clean "$_path"
      ;;
    outdated)
      yo_outdated "$_path"
      ;;
    run)
      # Pass arguments starting from second
      yo_run "${@:2}"
      ;;
    mock)
      yo_mock
      ;;
    path)
      yo_path
      ;;
    start-server)
      yo_start_server
      ;;
    kill-server)
      yo_kill_server
      ;;
    restart-server)
      yo_restart_server
      ;;
    tcpip)
      yo_tcpip
      ;;
    connect)
      yo_connect "$_path"
      ;;
    help)
      yo_help
      ;;
    *)
      printError "Unknown subcommand"
      yo_help
      ;;
    esac
  fi
}

# ***** Helper functions ****** #

# unset global variables
clean_variables() {
  unset currentProjectRoot
  unset currentProjectDirectoryName
  unset projectInitialized
}

# Save the current project root in currentProjectRoot variable and current project folder name in currentProjectDirectoryName variable
yo_get_project_info() {
  clean_variables
  local currentPath
  currentPath=$(pwd)

  local currentPathName=${currentPath////_}

  shopt -s nullglob

  cd "$HOME/.yo/" || return

  _directories=(*)
  for _dir in ${_directories[*]}; do
    if [[ ${currentPathName} == *"$_dir"* ]]; then
      cd "$currentPath" || return

      currentProjectDirectoryName="$_dir"
      currentProjectRoot=$(LC_ALL=C.UTF-8 grep -oP "(project_root=\K.*)" "$HOME/.yo/$currentProjectDirectoryName/config")
      return
    fi
  done
  cd "$currentPath" || return
}

# Verify if project has been initialized
yo_verify_project_initialization() {
  yo_get_project_info
  if [[ -z "$currentProjectRoot" ]]; then
    printError "Project has not yet been initialized"
    yo_help_init
    projectInitialized=false
  else
    projectInitialized=true
  fi
}

yo_flutter_command() {
  local _goBack=false
  local _verbose=false

  case $3 in
  -verbose)
    _verbose=true
    ;;
  -back)
    _goBack=true
    ;;
  esac

  case $4 in
  -verbose)
    _verbose=true
    ;;
  -back)
    _goBack=true
    ;;
  esac

  cd "$1" || return
  local _pubspec_file=pubspec.yaml
  if [[ -f "$_pubspec_file" ]]; then
    eval "$2"
  else
    if ${_verbose}; then
      printError "Please pass the correct package name"
    fi
  fi

  if ${_goBack}; then
    # to go back up a directory or not
    cd ..
  fi
}

# Color codes
# Color codes
_ERROR='\033[1;31m'
_SUCCESS='\033[1;32m'
_YELLOW='\033[1;33m'
_NO_COLOR='\033[0m'

printError() {
  echo -e "${_ERROR}*** $1 ***${_NO_COLOR}"
}

printSuccess() {
  echo -e "${_SUCCESS}*** $1 ***${_NO_COLOR}"
}

printInfo() {
  echo -e "${_YELLOW}*** $1 ***${_NO_COLOR}"
}

print() {
  echo -e "${_NO_COLOR}$1"
}
