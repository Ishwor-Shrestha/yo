#!/usr/bin/bash
#!/bin/bash

# To initialize a project
yo_init() {
  # Create .yo directory in home if does not exist
  mkdir -p "$HOME/.yo"

  _yoInitPath=$(pwd)
  _projectConfigDirName=${_yoInitPath////_}

  # Creates a project config directory if does not exist
  # Sub directories under initialized directory cannot be initialized
  yo_get_project_info
  if [ -d "$HOME/.yo/$_projectConfigDirName" ] || [[ -n "$currentProjectRoot" ]]; then
    unset currentProjectRoot
    printError "Project already initialized"
  else
    mkdir "$HOME/.yo/$_projectConfigDirName"
    echo "project_root=$(pwd)/" >"$HOME/.yo/$_projectConfigDirName/config"
    echo "script_path=" >>"$HOME/.yo/$_projectConfigDirName/config"
    echo "package_path=" >>"$HOME/.yo/$_projectConfigDirName/config"

    printSuccess "Project initialized"
  fi
}

# To set the path to bash scripts
# Path should be relative to project root
yo_script() {
  yo_verify_project_initialization
  if [ "$projectInitialized" -eq 0 ]; then
    unset projectInitialized
    return
  fi

  if [ -n "$1" ]; then
    sed -i 's|script_path=.*|script_path='"$currentProjectRoot$1"'|g' "$HOME/.yo/$currentProjectDirectoryName"/config
  else
    printError "Please provide the path"
    yo_help_script
  fi
  unset currentProjectRoot
  unset currentProjectDirectoryName
}

# To set the path to flutter package(s)
# Path should be relative to project root
yo_package() {
  yo_verify_project_initialization
  if [ "$projectInitialized" -eq 0 ]; then
    unset projectInitialized
    return
  fi

  if [ -n "$1" ]; then
    sed -i 's|package_path=.*|package_path='"$currentProjectRoot$1"'|g' "$HOME/.yo/$currentProjectDirectoryName"/config
  else
    printError "Please provide the path"
    yo_help_package
  fi
  unset currentProjectRoot
  unset currentProjectDirectoryName
}

# Run `flutter pub get` on specified package. If no package is specified, `flutter pub get` will be run on all packages
yo_get() {
  yo_verify_project_initialization
  if [ "$projectInitialized" -eq 0 ]; then
    unset projectInitialized
    return
  fi

  _currentDirectory=$(pwd)

  shopt -s nullglob

  _currentProjectPackagePath=$(grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)
  unset currentProjectDirectoryName
  unset currentProjectRoot

  # Print error if package path has not been set
  if [ -z "$_currentProjectPackagePath" ]; then
    printError "Please add package path first"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [ -n "$1" ]; then
    if [ -d "$1" ]; then
      yo_flutter_command "$1" "flutter pub get"
    else
      printError "No such directory"
    fi
  else
    _directories=(*)
    for _d in "${_directories[@]}"; do
      yo_flutter_command "$_d" "flutter pub get"
    done
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter test` on specified package. If no package is specified, `flutter test` will be run on all packages
yo_test() {
  yo_verify_project_initialization
  if [ "$projectInitialized" -eq 0 ]; then
    unset projectInitialized
    return
  fi

  _currentDirectory=$(pwd)

  shopt -s nullglob

  _currentProjectPackagePath=$(grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)
  unset currentProjectDirectoryName
  unset currentProjectRoot

  # Print error if package path has not been set
  if [ -z "$_currentProjectPackagePath" ]; then
    printError "Please add package path first"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return

  if [ -n "$1" ]; then
    if [ -d "$1" ]; then
      yo_flutter_command "$1" "flutter test"
    else
      printError "No such directory"
    fi
  else
    _directories=(*)
    for _d in "${_directories[@]}"; do
      yo_flutter_command "$_d" "flutter test"
    done
  fi

  cd "$_currentDirectory" || return
}

# Run `flutter build_runner` on specified package
# Print error if no package name is passed
yo_watch() {
  yo_verify_project_initialization
  if [ "$projectInitialized" -eq 0 ]; then
    unset projectInitialized
    return
  fi

  _currentDirectory=$(pwd)

  shopt -s nullglob

  _currentProjectPackagePath=$(grep -oP "(package_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)
  unset currentProjectDirectoryName
  unset currentProjectRoot

  # Print error if package path has not been set
  if [ -z "$_currentProjectPackagePath" ]; then
    printError "Please add package path"
    yo_help_package
    return
  fi

  cd "$_currentProjectPackagePath" || return
  if [ -n "$1" ]; then
    if [ -d "$1" ]; then
      yo_flutter_command "$1" "flutter pub run build_runner watch --delete-conflicting-outputs"
    else
      printError "No such directory"
    fi
  else
    printError "Please provide the package name"
    yo_help_watch
  fi

  cd "$_currentDirectory" || return
}

# Run the provided script from the script directory
# Print error if no script name is passed
yo_run() {
  yo_verify_project_initialization
  if [ "$projectInitialized" -eq 0 ]; then
    unset projectInitialized
    return
  fi

  _currentDirectory=$(pwd)

  shopt -s nullglob

  _currentProjectScriptPath=$(grep -oP "(script_path=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)
  unset currentProjectDirectoryName
  unset currentProjectRoot

  # Print error if package path has not been set
  if [ -z "$_currentProjectScriptPath" ]; then
    printError "Please add script path"
    yo_help_script
    return
  fi

  cd "$_currentProjectScriptPath" || return
  if [ -n "$1" ]; then
    if [ -d "$1" ]; then
      echo
    else
      printError "No such directory"
    fi
  else
    printError "Please provide the script name"
    yo_help_watch
  fi

  cd "$_currentDirectory" || return
}

# ------------------------- Helps ------------------------- #
yo_help() {
  print "Available YO subcommands"
  print
  print "init                                 Initialize the project"
  print "script <path>                        Add path (relative to the root of the project) to the scripts directory"
  print "package <path>                       Add path (relative to the root of the project) to the packages directory"
  print "get                                  Run 'flutter pub get' in all the packages"
  print "test                                 Run 'flutter test' in all the packages"
  print "get <package_name>                   Run 'flutter pub get' in the provided package"
  print "test <package_name>                  Run 'flutter test' in the provided package"
  print "watch <package_name>                 Run the 'build_runner' in the provided package"
  print "run <script_name>                    Run the provided script"
  print "run <script_name> <parameter(s)>        Run the provided script pass the parameter(s)"
  print "help                                 Get info about YO's subcommands"
}

yo_help_init() {
  print
  print "Usage: yo init"
  print "'yo help' to see all available subcommands"
}

yo_help_script() {
  print
  print "Usage: yo script <path>"
  print "'yo help' to see all available subcommands"
}

yo_help_package() {
  print
  print "Usage: yo package <path>"
  print "'yo help' to see all available subcommands"
}

yo_help_watch() {
  print
  print "Usage: yo watch <package_name>"
  print "'yo help' to see all available subcommands"
}

yo_help_run() {
  print
  print "Usage: yo run <script_name>"
  print "Usage: yo run <script_name> <parameter(s)>"
  print "'yo help' to see all available subcommands"
}
# --------------------------------------------------------- #

yo() {
  cmd=$1
  path=$2

  if [ -z "$1" ]; then
    yo_help
  else
    case $cmd in
    init)
      yo_init
      ;;
    script)
      yo_script "$path"
      ;;
    package)
      yo_package "$path"
      ;;
    get)
      yo_get "$path"
      ;;
    test)
      yo_test "$path"
      ;;
    watch)
      yo_watch "$path"
      ;;
    run)
      yo_run "$path"
      ;;
    help)
      yo_help
      ;;
    *)
      printError "Unknown subcommand"
      yo_help
      ;;
    esac

  fi
}

# ***** Helper functions ****** #

# Save the current project root in currentProjectRoot variable and current project folder name in currentProjectDirectoryName variable
yo_get_project_info() {
  _currentPath=$(pwd)
  _currentPathName=${_currentPath////_}

  shopt -s nullglob

  cd "$HOME/.yo/" || return

  _directories=(*)
  for _dir in "${_directories[@]}"; do
    if [[ $_currentPathName == *"$_dir"* ]]; then
      cd "$_currentPath" || return

      currentProjectDirectoryName="$_dir"
      currentProjectRoot=$(grep -oP "(project_root=\K.*)" "$HOME/.yo/$currentProjectDirectoryName"/config)
      return
    fi
  done
  cd "$_currentPath" || return
}

# Verify if project has been initialized
yo_verify_project_initialization() {
  yo_get_project_info

  if [ -z "$currentProjectRoot" ]; then
    unset currentProjectRoot
    printError "Project has not yet been initialized"
    yo_help_init
    projectInitialized=0
  else
    projectInitialized=1
  fi
}

yo_flutter_command() {
  cd "$1" || return
  _pubspec_file=pubspec.yaml
  if [ -f "$_pubspec_file" ]; then
    eval "$2"
  fi
  cd ..
}

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NO_COLOR='\033[0m'

printError() {
  echo -e "${RED}*** $1 ***"
}

printSuccess() {
  echo -e "${GREEN}*** $1 ***"
}

printInfo() {
  echo -e "${YELLOW}*** $1 ***"
}

print() {
  echo -e "${NO_COLOR}$1"
}
